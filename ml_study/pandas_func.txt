🔍 1. 읽기 (read_* 계열)

함수            설명                예시
read_csv()	CSV 파일 읽기           pd.read_csv("data.csv")
read_excel()    엑셀 파일 읽기      pd.read_excel("data.xlsx")
read_sql()      SQL 쿼리 결과 읽기  pd.read_sql(query, conn)

tip: 파일 인코딩 오류 시 encoding='utf-8' 또는 encoding='cp949' 사용.


💾 2. 저장 (to_* 계열)

함수        설명        예시
to_csv()    CSV로 저장  df.to_csv("output.csv", index=False)
to_excel()  엑셀로 저장 df.to_excel("output.xlsx")
to_sql()    DB에 저장   df.to_sql("table", conn)

index=False 옵션을 사용하면 DataFrame의 인덱스를 저장하지 않음.


👁️ 3. 보기

함수        설명                                예시
head(n)     상위 n개 행 보기 (기본 5개)         df.head(3)
tail(n)     하위 n개 행 보기                    df.tail(3)
info()      열 정보, 데이터 타입, 결측값 확인   df.info()
describe()  수치형 열의 통계 요약               df.describe()
shape
size()      그룹의 전체 행 수 계산 (모든 열 포함)       ✅ NaN도 셈
count()     열별로 NaN이 아닌 값 개수 계산 (열별 집계)  ❌ NaN은 제외
value_counts()
df['col'].describe()를 하면 특정 열만 요약 가능.


🎯 4. 인덱싱 및 접근

구문                        설명                    예시
df['col']                   열 접근                 df['age']
df.loc[row_idx, col_name]	라벨 기반 접근          df.loc[3, 'age']
df.iloc[row_idx, col_idx]	정수 인덱스 기반 접근   df.iloc[3, 1]

.loc[]는 라벨(이름), .iloc[]는 정수 인덱스를 사용.


✅ 5. 조건 필터링

구문                설명                    예시
df[df['col'] > 10]  조건에 맞는 행만 추출   df[df['age'] >= 20]


🔢 6. 정렬

함수                설명                    예시
sort_values(by=)    특정 열 기준으로 정렬   df.sort_values(by='score', ascending=False)
sort_index()        인덱스로 정렬           df.sort_index()

다중 정렬: df.sort_values(by=['class', 'score'])


❓ 7. 결측값 처리

함수            설명                    예시
isnull()        결측값 여부             df['age'].isnull()      
                                        NaN → True, 값 있음 → False
drop()          특정 행 삭제            df.drop('age')
dropna()        결측값 포함 행 삭제     df.dropna()
fillna(value)   결측값 채우기           df['age'].fillna(0)
notnull()       NaN → False, 값 있음 → True
fillna()        Replacing missing       df['age'].fillna("Unknown")
replace()       NaN이 아닌 값도 대체   df['name'].replace('bill', 'Bill')

✅ NaN이 있는 행 제거   df[df['A'].notnull()]
✅ NaN이 있는 열 제거   df.dropna(axis=1)  # NaN 있는 열 삭제

평균/중앙값으로 채우기: df['age'].fillna(df['age'].mean())


📊 8. 그룹화 & 집계

함수        설명                예시
groupby()   그룹 단위로 묶기    df.groupby('class')
agg()       여러 통계 집계      df.groupby('class')['score'].agg(['mean', 'max'])


그룹의 합계, 평균, 개수 등을 구할 수 있어.


🔗 9. 병합 & 연결

함수        설명                    예시
concat()    행/열 방향으로 붙이기   pd.concat([df1, df2])
merge()     SQL JOIN처럼 병합       pd.merge(df1, df2, on='id')
join()      인덱스를 기준으로 병합  df1.join(df2, how='left')l


🔄 10. 기타 유용 기능

기능            예시
열 이름 바꾸기  df.rename(columns={'old': 'new'})
값 대체         df['col'].replace({'a': 'A'})
중복 제거       df.drop_duplicates()
새로운 열 추가  df['total'] = df['kor'] + df['eng']

✅ map()
📌 기능: Series의 각 요소에 함수 또는 매핑 dict를 적용
🔧 예시: df['price_doubled'] = df['price'].map(lambda x: x * 2)

✅ apply()
📌 기능: Series 또는 DataFrame의 각 행/열에 함수 적용
🔧 예시: f['sum'] = df.apply(lambda row: row['A'] + row['B'], axis=1)

✅ groupby()
📌 기능: 특정 열을 기준으로 그룹 묶기
🔧 예시: df.groupby('country')[['price', 'points']].mean()

# get_group('group') -> 실제 그룹 보기

✅ agg()
📌 기능: 집계 함수(aggregate function)를 한 번에 여러 개 적용
🔧 예시: df.groupby('country')['points'].agg(['mean', 'max'])

reset_index() # Multi-indexes 확


✅ 주요 계산 함수 정리표

함수명      설명                반환값
sum()       합계 계산           각 열(또는 행)의 합
mean()      평균 계산           각 열(또는 행)의 평균
median()    중앙값 계산         각 열의 중앙값
min()       최소값 계산         각 열의 최솟값
max()       최대값 계산         각 열의 최댓값
std()       표준편차 계산       각 열의 표준편차
var()       분산 계산           각 열의 분산
count()     결측치 제외 개수    각 열(또는 행)에서 유효한 값의 수
idxmin()    최소값의 인덱스     최소값이 있는 행 또는 열의 인덱스
idxmax()    최대값의 인덱스     최대값이 있는 행 또는 열의 인덱스
mode()      최빈값              가장 많이 등장한 값(복수 가능)
quantile(q) 분위수              q 분위수 (ex. 0.25, 0.5, 0.75 등)
nunique()   고유값 개수         각 열(또는 행)의 고유값 개수
describe()  요약 통계           count, mean, std, min, max 등 전체 요약

dtype       자료형 확인
astype()    자료형 변경

rename()        lets you change index names and/or column names
                                reviews.rename(columns={'points': 'score'})
                                reviews.rename(index={0: 'firstEntry', 1: 'secondEntry'})
set_index()     특정 열을 DataFrame의 인덱스로 설정 
rename_axis()   인덱스 또는 컬럼의 "이름(label)"을 바꿈
                                reviews.rename_axis("wines", axis='rows').rename_axis("fields", axis='columns')


✅ 1. concat()
    인덱스를 기준으로 병합 / 축 선택 가능 (axis=0이면 위아래로, axis=1이면 옆으로) 
    예제: pd.concat([df1, df2], axis=1)

✅ 2. df1.join(df2)
    기본적으로 행 index 기준 병합 / on 인자를 지정하면 merge()처럼 동작
    예제: df1.join(df2)

✅ 3. pd.merge()
    열을 기준으로 병합 / on, left_on, right_on-> 병합 키를 지정 / how='inner', 'outer', 'left', 'right' 옵션
    예제: pd.merge(df1, df2, on='key', how='outer')
