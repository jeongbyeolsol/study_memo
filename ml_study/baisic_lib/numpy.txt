🧮 NumPy란?
Numerical Python의 줄임말.
대규모 수치 계산을 빠르고 효율적으로 처리하기 위해 만들어진 Python 라이브러리야.

✅ NumPy의 핵심
빠르고 강력한 다차원 배열 (ndarray)

브로드캐스팅을 포함한 벡터화 연산

다양한 수학 함수, 선형대수, 난수 생성, FFT 등


🔹 1. 배열 생성

np.array([1, 2, 3])                     # 1D 배열
np.array([[1, 2], [3, 4]])              # 2D 배열

✅ 초기화 함수
함수                    설명
np.zeros((3, 4))        0으로 채운 3x4 배열
np.ones((2, 2))         1로 채운 배열
np.eye(3)               단위 행렬
np.full((2, 2), 7)      특정 값으로 채움
np.arange(0, 10, 2)     0~10 미만, 간격 2
np.linspace(0, 1, 5)    0~1 사이 5개 등분


🔹 2. 배열 속성 및 메타데이터

a = np.array([[1, 2, 3], [4, 5, 6]])
a.shape     # (2, 3)
a.ndim      # 차원 수
a.size      # 전체 원소 수
a.dtype     # 자료형
a.itemsize  # 원소 하나의 바이트 수


3. 인덱싱과 슬라이싱

a[0, 1]       # 0번째 행, 1번째 열
a[:, 1]       # 모든 행, 1번째 열
a[1, :]       # 1번째 행, 모든 열
a[::2]        # 2칸 간격 슬라이싱



🔹 4. 연산

✅ 기본 연산 (벡터화)
a = np.array([1, 2, 3])
b = np.array([10, 20, 30])
a + b        # [11, 22, 33]
a * 2        # [2, 4, 6]

✅ 브로드캐스팅 (자동 크기 맞춤 연산)
a = np.array([[1], [2], [3]])  # (3,1)
b = np.array([10, 20, 30])     # (3,)
a + b  # shape 맞춰 자동 연산됨


🔹 5. 실전에서 자주 쓰는 함수들

함수                    설명
np.sum(a)               전체 합
np.mean(a)              평균
np.std(a)               표준편차
np.max(a), np.min(a)    최댓값, 최솟값
np.argmax(a)            최댓값 인덱스
np.sort(a)              정렬
np.unique(a)            중복 제거한 유니크 값 반환


🔹 6. 형태 변경

a.reshape(3, 2)     # 모양 재구성
a.ravel()           # 평탄화
a.T                 # 전치(transpose)


🔹 7. 논리 연산 & 필터링

a = np.array([1, 2, 3, 4, 5])
a[a > 3]      # [4, 5] → 조건 필터링
a[(a > 2) & (a < 5)]  # [3, 4]


🔹 8. 난수 생성

np.random.seed(42)        # 재현성
np.random.rand(2, 2)      # [0, 1) 균일 분포
np.random.randn(2, 2)     # 평균 0, 표준편차 1 정규분포
np.random.randint(0, 10, size=(3,))  # 정수 배열


🔹 9. 고급 기능

np.dot(a, b) 또는 a @ b: 행렬 곱
np.linalg.inv(a): 역행렬
np.linalg.eig(a): 고유값/고유벡터
np.fft.fft(a): 푸리에 변환
np.save/load: 배열 저장/불러오기
