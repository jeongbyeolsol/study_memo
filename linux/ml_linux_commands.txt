🧠 머신러닝을 위한 리눅스 명령어 요약

───────────────────────────────────────────────
📁 1. 가상환경 및 프로젝트 관리

• python3 -m venv venv
  → 가상환경 생성

• source venv/bin/activate
  → 가상환경 활성화

• deactivate
  → 가상환경 비활성화

• pip freeze > requirements.txt
  → 설치된 패키지 목록 저장

• pip install -r requirements.txt
  → 패키지 목록 한 번에 설치

※ WSL은 리눅스지만 독립된 환경이기 때문에, 가상환경은 실험 간 충돌 방지를 위해 여전히 유용함.

───────────────────────────────────────────────
🖥️ 2. Jupyter Lab 백그라운드 실행

• nohup jupyter lab --no-browser --port=8888 > jupyter.log 2>&1 &

→ 설명:
  - nohup : 터미널을 닫아도 실행 유지
  - > jupyter.log : 출력을 파일로 리디렉션
  - 2>&1 : 에러 출력(2번 채널)을 일반 출력(1번)으로 합침
  - & : 백그라운드 실행

• tail -f jupyter.log
  → 로그 파일을 실시간으로 확인

• ps aux | grep jupyter
  → 실행 중인 주피터 프로세스 확인

• kill <PID>
  → 주피터 종료

───────────────────────────────────────────────
📊 3. 로그 및 결과 확인

• python train.py > logs/train.log 2>&1 &
  → 학습 로그를 백그라운드로 기록

• tail -f logs/train.log
  → 실시간으로 로그 보기

• grep "loss" logs/train.log
  → 특정 단어만 필터링

───────────────────────────────────────────────
🔍 4. 데이터 핸들링 명령어

• head -n 10 data.csv
  → 상위 10줄 보기

• cut -d ',' -f1,3 data.csv
  → 콤마로 구분된 열 중 1번, 3번 필드 추출

• sort data.csv | uniq
  → 중복 제거된 정렬 결과

• grep "keyword" file.txt
  → 특정 키워드 포함된 줄 출력

───────────────────────────────────────────────
🧵 5. 세션 유지: tmux / screen

• tmux new -s mysession
  → 새 세션 시작

• tmux ls
  → 현재 세션 목록 보기

• tmux attach -t mysession
  → 세션 재접속

• tmux detach
  → 세션 빠져나오기 (Ctrl + b, d)

(또는 screen 명령어도 유사하게 사용 가능)

───────────────────────────────────────────────
📦 6. 유용한 추가 명령어

• nvidia-smi
  → GPU 상태 확인

• wc -l file.txt
  → 파일의 줄 수 확인

• du -sh *
  → 현재 디렉토리의 용량 확인

• watch -n 2 nvidia-smi
  → 2초마다 GPU 사용 상태 갱신 출력

───────────────────────────────────────────────

